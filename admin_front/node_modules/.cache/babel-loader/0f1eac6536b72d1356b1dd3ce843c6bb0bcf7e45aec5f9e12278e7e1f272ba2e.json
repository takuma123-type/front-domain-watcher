{"ast":null,"code":"import { UsersRepository } from \"../infrastructure/repositories/UsersRepository\";\nimport { UserItem } from \"../models/presentation/UserItem\";\nimport { Storage } from \"../infrastructure/Storage\";\nimport { InvlalidSessionTokenError, UnauthorizedError } from \"../infrastructure/repositories\";\nexport class FetchUsersInput {}\nexport class FetchUsersOutput {\n  constructor(users) {\n    this.users = void 0;\n    this.users = users;\n  }\n}\nexport class FetchUsersUsecase {\n  static fetch(usersRepository, sessionToken) {\n    throw new Error(\"Method not implemented.\");\n  }\n  async fetch(input) {\n    const {\n      sessionToken\n    } = input;\n    if (!sessionToken) {\n      return Promise.reject(new InvlalidSessionTokenError());\n    }\n    try {\n      const data = await new UsersRepository().fetch(sessionToken);\n      const users = data.map(user => new UserItem(user));\n      return new FetchUsersOutput(users);\n    } catch (e) {\n      if (e instanceof UnauthorizedError) {\n        Storage.clear();\n      }\n      throw e;\n    }\n  }\n}","map":{"version":3,"names":["UsersRepository","UserItem","Storage","InvlalidSessionTokenError","UnauthorizedError","FetchUsersInput","FetchUsersOutput","constructor","users","FetchUsersUsecase","fetch","usersRepository","sessionToken","Error","input","Promise","reject","data","map","user","e","clear"],"sources":["/usr/src/app/admin_front/src/usecases/FetchUsersUsecase.tsx"],"sourcesContent":["import { UsersRepository } from \"../infrastructure/repositories/UsersRepository\";\nimport { UserItem } from \"../models/presentation/UserItem\";\nimport { Storage } from \"../infrastructure/Storage\";\nimport {\n  InvlalidSessionTokenError,\n  UnauthorizedError,\n} from \"../infrastructure/repositories\";\n\nexport class FetchUsersInput {}\n\nexport class FetchUsersOutput {\n  readonly users: UserItem[];\n\n  constructor(users: UserItem[]) {\n    this.users = users;\n  }\n}\n\nexport class FetchUsersUsecase {\n  static fetch(usersRepository: UsersRepository, sessionToken: string) {\n    throw new Error(\"Method not implemented.\");\n  }\n  async fetch(input: FetchUsersInput): Promise<FetchUsersOutput> {\n    const { sessionToken } = input;\n\n    if (!sessionToken) {\n      return Promise.reject(new InvlalidSessionTokenError());\n    }\n\n    try {\n      const data = await new UsersRepository().fetch(sessionToken);\n      const users = data.map((user: any) => new UserItem(user));\n      return new FetchUsersOutput(users);\n    } catch (e) {\n      if (e instanceof UnauthorizedError) {\n        Storage.clear();\n      }\n      throw e;\n    }\n  }\n}\n"],"mappings":"AAAA,SAASA,eAAe,QAAQ,gDAAgD;AAChF,SAASC,QAAQ,QAAQ,iCAAiC;AAC1D,SAASC,OAAO,QAAQ,2BAA2B;AACnD,SACEC,yBAAyB,EACzBC,iBAAiB,QACZ,gCAAgC;AAEvC,OAAO,MAAMC,eAAe,CAAC;AAE7B,OAAO,MAAMC,gBAAgB,CAAC;EAG5BC,WAAWA,CAACC,KAAiB,EAAE;IAAA,KAFtBA,KAAK;IAGZ,IAAI,CAACA,KAAK,GAAGA,KAAK;EACpB;AACF;AAEA,OAAO,MAAMC,iBAAiB,CAAC;EAC7B,OAAOC,KAAKA,CAACC,eAAgC,EAAEC,YAAoB,EAAE;IACnE,MAAM,IAAIC,KAAK,CAAC,yBAAyB,CAAC;EAC5C;EACA,MAAMH,KAAKA,CAACI,KAAsB,EAA6B;IAC7D,MAAM;MAAEF;IAAa,CAAC,GAAGE,KAAK;IAE9B,IAAI,CAACF,YAAY,EAAE;MACjB,OAAOG,OAAO,CAACC,MAAM,CAAC,IAAIb,yBAAyB,CAAC,CAAC,CAAC;IACxD;IAEA,IAAI;MACF,MAAMc,IAAI,GAAG,MAAM,IAAIjB,eAAe,CAAC,CAAC,CAACU,KAAK,CAACE,YAAY,CAAC;MAC5D,MAAMJ,KAAK,GAAGS,IAAI,CAACC,GAAG,CAAEC,IAAS,IAAK,IAAIlB,QAAQ,CAACkB,IAAI,CAAC,CAAC;MACzD,OAAO,IAAIb,gBAAgB,CAACE,KAAK,CAAC;IACpC,CAAC,CAAC,OAAOY,CAAC,EAAE;MACV,IAAIA,CAAC,YAAYhB,iBAAiB,EAAE;QAClCF,OAAO,CAACmB,KAAK,CAAC,CAAC;MACjB;MACA,MAAMD,CAAC;IACT;EACF;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}