{"ast":null,"code":"import { Storage } from \"../infrastructure/Storage\";\nimport { InvlalidSessionTokenError, UsersRepository, UnauthorizedError } from \"../infrastructure/repositories\";\nimport { UserItem } from \"../models/presentation/UserItem\";\nexport class FetchUsersInput {}\nexport class FetchUsersOutput {\n  constructor(params) {\n    this.users = void 0;\n    this.users = params.users;\n  }\n}\nexport class FetchUsersUsecase {\n  constructor(input) {\n    this.input = void 0;\n    this.input = input;\n  }\n  fetch() {\n    const sessionToken = Storage.restoreSessionToken();\n    if (!sessionToken) {\n      return Promise.reject(new InvlalidSessionTokenError());\n    }\n    return new UsersRepository().fetch(sessionToken).then(data => {\n      return new FetchUsersOutput({\n        users: data.map(user => new UserItem(user))\n      });\n    }).catch(e => {\n      if (e instanceof UnauthorizedError) {\n        Storage.clear();\n      }\n      throw e; // エラーをthrowするように変更しました\n    });\n  }\n}","map":{"version":3,"names":["Storage","InvlalidSessionTokenError","UsersRepository","UnauthorizedError","UserItem","FetchUsersInput","FetchUsersOutput","constructor","params","users","FetchUsersUsecase","input","fetch","sessionToken","restoreSessionToken","Promise","reject","then","data","map","user","catch","e","clear"],"sources":["/usr/src/app/admin_front/src/usecases/FetchUsersUsecase.tsx"],"sourcesContent":["import { Storage } from \"../infrastructure/Storage\";\nimport {\n  InvlalidSessionTokenError,\n  UsersRepository,\n  UnauthorizedError,\n} from \"../infrastructure/repositories\";\nimport { UserItem } from \"../models/presentation/UserItem\";\n\nexport class FetchUsersInput {}\n\nexport class FetchUsersOutput {\n  readonly users: UserItem[];\n\n  constructor(params: { users: UserItem[] }) {\n    this.users = params.users;\n  }\n}\n\nexport class FetchUsersUsecase {\n  readonly input: FetchUsersInput;\n\n  constructor(input: FetchUsersInput) {\n    this.input = input;\n  }\n\n  fetch(): Promise<FetchUsersOutput> {\n    const sessionToken = Storage.restoreSessionToken();\n    if (!sessionToken) {\n      return Promise.reject(new InvlalidSessionTokenError());\n    }\n\n    return new UsersRepository()\n      .fetch(sessionToken)\n      .then((data) => {\n        return new FetchUsersOutput({\n          users: data.map((user: any) => new UserItem(user)),\n        });\n      })\n      .catch((e) => {\n        if (e instanceof UnauthorizedError) {\n          Storage.clear();\n        }\n        throw e; // エラーをthrowするように変更しました\n      });\n  }\n}\n"],"mappings":"AAAA,SAASA,OAAO,QAAQ,2BAA2B;AACnD,SACEC,yBAAyB,EACzBC,eAAe,EACfC,iBAAiB,QACZ,gCAAgC;AACvC,SAASC,QAAQ,QAAQ,iCAAiC;AAE1D,OAAO,MAAMC,eAAe,CAAC;AAE7B,OAAO,MAAMC,gBAAgB,CAAC;EAG5BC,WAAWA,CAACC,MAA6B,EAAE;IAAA,KAFlCC,KAAK;IAGZ,IAAI,CAACA,KAAK,GAAGD,MAAM,CAACC,KAAK;EAC3B;AACF;AAEA,OAAO,MAAMC,iBAAiB,CAAC;EAG7BH,WAAWA,CAACI,KAAsB,EAAE;IAAA,KAF3BA,KAAK;IAGZ,IAAI,CAACA,KAAK,GAAGA,KAAK;EACpB;EAEAC,KAAKA,CAAA,EAA8B;IACjC,MAAMC,YAAY,GAAGb,OAAO,CAACc,mBAAmB,CAAC,CAAC;IAClD,IAAI,CAACD,YAAY,EAAE;MACjB,OAAOE,OAAO,CAACC,MAAM,CAAC,IAAIf,yBAAyB,CAAC,CAAC,CAAC;IACxD;IAEA,OAAO,IAAIC,eAAe,CAAC,CAAC,CACzBU,KAAK,CAACC,YAAY,CAAC,CACnBI,IAAI,CAAEC,IAAI,IAAK;MACd,OAAO,IAAIZ,gBAAgB,CAAC;QAC1BG,KAAK,EAAES,IAAI,CAACC,GAAG,CAAEC,IAAS,IAAK,IAAIhB,QAAQ,CAACgB,IAAI,CAAC;MACnD,CAAC,CAAC;IACJ,CAAC,CAAC,CACDC,KAAK,CAAEC,CAAC,IAAK;MACZ,IAAIA,CAAC,YAAYnB,iBAAiB,EAAE;QAClCH,OAAO,CAACuB,KAAK,CAAC,CAAC;MACjB;MACA,MAAMD,CAAC,CAAC,CAAC;IACX,CAAC,CAAC;EACN;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}