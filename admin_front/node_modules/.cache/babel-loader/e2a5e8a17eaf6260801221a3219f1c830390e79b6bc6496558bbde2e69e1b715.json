{"ast":null,"code":"import { UserItem } from \"../models/presentation/UserItem\";\nexport class FetchUsersUsecase {\n  static async fetch(usersRepository, sessionToken) {\n    if (!sessionToken) {\n      throw new Error(\"セッショントークンがありません。\");\n    }\n    try {\n      const usersData = await usersRepository.fetch(sessionToken);\n      const formattedUsers = usersData.map(user => new UserItem(user));\n      return formattedUsers;\n    } catch (err) {\n      console.error(err);\n      throw err;\n    }\n  }\n}","map":{"version":3,"names":["UserItem","FetchUsersUsecase","fetch","usersRepository","sessionToken","Error","usersData","formattedUsers","map","user","err","console","error"],"sources":["/usr/src/app/admin_front/src/usecases/FetchUsersUsecase.tsx"],"sourcesContent":["import { UsersRepository } from \"../infrastructure/repositories/UsersRepository\";\nimport { UserItem } from \"../models/presentation/UserItem\";\n\nexport class FetchUsersUsecase {\n  static async fetch(\n    usersRepository: UsersRepository,\n    sessionToken?: string\n  ): Promise<UserItem[]> {\n    if (!sessionToken) {\n      throw new Error(\"セッショントークンがありません。\");\n    }\n\n    try {\n      const usersData = await usersRepository.fetch(sessionToken);\n      const formattedUsers = usersData.map((user: any) => new UserItem(user));\n      return formattedUsers;\n    } catch (err) {\n      console.error(err);\n      throw err;\n    }\n  }\n}\n"],"mappings":"AACA,SAASA,QAAQ,QAAQ,iCAAiC;AAE1D,OAAO,MAAMC,iBAAiB,CAAC;EAC7B,aAAaC,KAAKA,CAChBC,eAAgC,EAChCC,YAAqB,EACA;IACrB,IAAI,CAACA,YAAY,EAAE;MACjB,MAAM,IAAIC,KAAK,CAAC,kBAAkB,CAAC;IACrC;IAEA,IAAI;MACF,MAAMC,SAAS,GAAG,MAAMH,eAAe,CAACD,KAAK,CAACE,YAAY,CAAC;MAC3D,MAAMG,cAAc,GAAGD,SAAS,CAACE,GAAG,CAAEC,IAAS,IAAK,IAAIT,QAAQ,CAACS,IAAI,CAAC,CAAC;MACvE,OAAOF,cAAc;IACvB,CAAC,CAAC,OAAOG,GAAG,EAAE;MACZC,OAAO,CAACC,KAAK,CAACF,GAAG,CAAC;MAClB,MAAMA,GAAG;IACX;EACF;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}