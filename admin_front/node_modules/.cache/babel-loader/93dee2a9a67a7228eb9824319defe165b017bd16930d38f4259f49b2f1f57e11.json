{"ast":null,"code":"import { API } from \"../API\";\nimport { UnauthorizedError, UnknownError } from \"./errors\";\nexport class UsersRepository {\n  fetch(sessionToken) {\n    return fetch(API.createURL(API.URL.users()), {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"X-SOEUR-ADMIN-API-Key\": \"hogehoge\",\n        Authorization: `Bearer ${sessionToken}`\n      }\n    }).then(response => {\n      if (response.status === 200) {\n        return response.json();\n      }\n      if (response.status === 401) {\n        throw new UnauthorizedError();\n      }\n      throw new UnknownError();\n    });\n  }\n  get(params) {\n    return fetch(API.createURL(API.URL.user({\n      userId: params.userId\n    })), {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"X-SOEUR-ADMIN-API-Key\": \"hogehoge\",\n        Authorization: `Bearer ${params.sessionToken}`\n      }\n    }).then(response => {\n      if (response.status === 200) {\n        return response.json();\n      }\n      if (response.status === 401) {\n        throw new UnauthorizedError();\n      }\n      throw new UnknownError();\n    });\n  }\n}","map":{"version":3,"names":["API","UnauthorizedError","UnknownError","UsersRepository","fetch","sessionToken","createURL","URL","users","method","headers","Authorization","then","response","status","json","get","params","user","userId"],"sources":["/usr/src/app/admin_front/src/infrastructure/repositories/UsersRepository.tsx"],"sourcesContent":["import { API } from \"../API\";\nimport { UnauthorizedError, UnknownError } from \"./errors\";\n\nexport class UsersRepository {\n  fetch(sessionToken: string): Promise<any> {\n    return fetch(API.createURL(API.URL.users()), {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"X-SOEUR-ADMIN-API-Key\": \"hogehoge\",\n        Authorization: `Bearer ${sessionToken}`,\n      },\n    }).then((response) => {\n      if (response.status === 200) {\n        return response.json();\n      }\n      if (response.status === 401) {\n        throw new UnauthorizedError();\n      }\n      throw new UnknownError();\n    });\n  }\n\n  get(params: { sessionToken: string; userId: string }): Promise<any> {\n    return fetch(API.createURL(API.URL.user({ userId: params.userId })), {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"X-SOEUR-ADMIN-API-Key\": \"hogehoge\",\n        Authorization: `Bearer ${params.sessionToken}`,\n      },\n    }).then((response) => {\n      if (response.status === 200) {\n        return response.json();\n      }\n      if (response.status === 401) {\n        throw new UnauthorizedError();\n      }\n      throw new UnknownError();\n    });\n  }\n}\n"],"mappings":"AAAA,SAASA,GAAG,QAAQ,QAAQ;AAC5B,SAASC,iBAAiB,EAAEC,YAAY,QAAQ,UAAU;AAE1D,OAAO,MAAMC,eAAe,CAAC;EAC3BC,KAAKA,CAACC,YAAoB,EAAgB;IACxC,OAAOD,KAAK,CAACJ,GAAG,CAACM,SAAS,CAACN,GAAG,CAACO,GAAG,CAACC,KAAK,CAAC,CAAC,CAAC,EAAE;MAC3CC,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClC,uBAAuB,EAAE,UAAU;QACnCC,aAAa,EAAG,UAASN,YAAa;MACxC;IACF,CAAC,CAAC,CAACO,IAAI,CAAEC,QAAQ,IAAK;MACpB,IAAIA,QAAQ,CAACC,MAAM,KAAK,GAAG,EAAE;QAC3B,OAAOD,QAAQ,CAACE,IAAI,CAAC,CAAC;MACxB;MACA,IAAIF,QAAQ,CAACC,MAAM,KAAK,GAAG,EAAE;QAC3B,MAAM,IAAIb,iBAAiB,CAAC,CAAC;MAC/B;MACA,MAAM,IAAIC,YAAY,CAAC,CAAC;IAC1B,CAAC,CAAC;EACJ;EAEAc,GAAGA,CAACC,MAAgD,EAAgB;IAClE,OAAOb,KAAK,CAACJ,GAAG,CAACM,SAAS,CAACN,GAAG,CAACO,GAAG,CAACW,IAAI,CAAC;MAAEC,MAAM,EAAEF,MAAM,CAACE;IAAO,CAAC,CAAC,CAAC,EAAE;MACnEV,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClC,uBAAuB,EAAE,UAAU;QACnCC,aAAa,EAAG,UAASM,MAAM,CAACZ,YAAa;MAC/C;IACF,CAAC,CAAC,CAACO,IAAI,CAAEC,QAAQ,IAAK;MACpB,IAAIA,QAAQ,CAACC,MAAM,KAAK,GAAG,EAAE;QAC3B,OAAOD,QAAQ,CAACE,IAAI,CAAC,CAAC;MACxB;MACA,IAAIF,QAAQ,CAACC,MAAM,KAAK,GAAG,EAAE;QAC3B,MAAM,IAAIb,iBAAiB,CAAC,CAAC;MAC/B;MACA,MAAM,IAAIC,YAAY,CAAC,CAAC;IAC1B,CAAC,CAAC;EACJ;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}