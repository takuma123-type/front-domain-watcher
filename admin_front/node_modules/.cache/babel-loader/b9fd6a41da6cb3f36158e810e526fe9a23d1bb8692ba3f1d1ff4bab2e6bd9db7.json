{"ast":null,"code":"import { Storage } from \"../infrastructure/Storage\";\nimport { UnauthorizedError } from \"../infrastructure/repositories\";\nimport { UserItem } from \"../models/presentation/UserItem\";\nexport class FetchUsersOutput {\n  constructor(users) {\n    this.users = void 0;\n    this.users = users;\n  }\n}\nexport class FetchUsersUsecase {\n  constructor(usersRepository) {\n    this.usersRepository = void 0;\n    this.usersRepository = usersRepository;\n  }\n  async fetch() {\n    const sessionToken = Storage.restoreSessionToken() || \"temporaryToken\";\n    try {\n      const usersCell = await this.usersRepository.fetch(sessionToken);\n      const users = usersCell.map(user => new UserItem(user));\n      console.log(\"Full Fetched Response:\", JSON.stringify(usersCell, null, 2));\n      return new FetchUsersOutput(users || []);\n    } catch (e) {\n      console.error(\"Error in FetchUsersUsecase.fetch:\", e);\n      if (e instanceof UnauthorizedError) {\n        Storage.clear();\n      }\n      throw e;\n    }\n  }\n}","map":{"version":3,"names":["Storage","UnauthorizedError","UserItem","FetchUsersOutput","constructor","users","FetchUsersUsecase","usersRepository","fetch","sessionToken","restoreSessionToken","usersCell","map","user","console","log","JSON","stringify","e","error","clear"],"sources":["/usr/src/app/admin_front/src/usecases/FetchUsersUsecase.tsx"],"sourcesContent":["import { Storage } from \"../infrastructure/Storage\";\nimport {\n  InvlalidSessionTokenError,\n  UsersRepository,\n  UnauthorizedError,\n} from \"../infrastructure/repositories\";\nimport { UserItem } from \"../models/presentation/UserItem\";\n\nexport class FetchUsersOutput {\n  readonly users: UserItem[];\n\n  constructor(users: UserItem[]) {\n    this.users = users;\n  }\n}\n\nexport class FetchUsersUsecase {\n  public usersRepository: UsersRepository;\n\n  constructor(usersRepository: UsersRepository) {\n    this.usersRepository = usersRepository;\n  }\n\n  async fetch(): Promise<FetchUsersOutput> {\n    const sessionToken = Storage.restoreSessionToken() || \"temporaryToken\";\n\n    try {\n      const usersCell = await this.usersRepository.fetch(sessionToken);\n      const users = usersCell.map((user: any) => new UserItem(user));\n      console.log(\"Full Fetched Response:\", JSON.stringify(usersCell, null, 2));\n      return new FetchUsersOutput(users || []);\n    } catch (e) {\n      console.error(\"Error in FetchUsersUsecase.fetch:\", e);\n      if (e instanceof UnauthorizedError) {\n        Storage.clear();\n      }\n      throw e;\n    }\n  }\n}\n"],"mappings":"AAAA,SAASA,OAAO,QAAQ,2BAA2B;AACnD,SAGEC,iBAAiB,QACZ,gCAAgC;AACvC,SAASC,QAAQ,QAAQ,iCAAiC;AAE1D,OAAO,MAAMC,gBAAgB,CAAC;EAG5BC,WAAWA,CAACC,KAAiB,EAAE;IAAA,KAFtBA,KAAK;IAGZ,IAAI,CAACA,KAAK,GAAGA,KAAK;EACpB;AACF;AAEA,OAAO,MAAMC,iBAAiB,CAAC;EAG7BF,WAAWA,CAACG,eAAgC,EAAE;IAAA,KAFvCA,eAAe;IAGpB,IAAI,CAACA,eAAe,GAAGA,eAAe;EACxC;EAEA,MAAMC,KAAKA,CAAA,EAA8B;IACvC,MAAMC,YAAY,GAAGT,OAAO,CAACU,mBAAmB,CAAC,CAAC,IAAI,gBAAgB;IAEtE,IAAI;MACF,MAAMC,SAAS,GAAG,MAAM,IAAI,CAACJ,eAAe,CAACC,KAAK,CAACC,YAAY,CAAC;MAChE,MAAMJ,KAAK,GAAGM,SAAS,CAACC,GAAG,CAAEC,IAAS,IAAK,IAAIX,QAAQ,CAACW,IAAI,CAAC,CAAC;MAC9DC,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEC,IAAI,CAACC,SAAS,CAACN,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;MACzE,OAAO,IAAIR,gBAAgB,CAACE,KAAK,IAAI,EAAE,CAAC;IAC1C,CAAC,CAAC,OAAOa,CAAC,EAAE;MACVJ,OAAO,CAACK,KAAK,CAAC,mCAAmC,EAAED,CAAC,CAAC;MACrD,IAAIA,CAAC,YAAYjB,iBAAiB,EAAE;QAClCD,OAAO,CAACoB,KAAK,CAAC,CAAC;MACjB;MACA,MAAMF,CAAC;IACT;EACF;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}