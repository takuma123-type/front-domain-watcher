{"ast":null,"code":"var _jsxFileName = \"/Users/takuma/Desktop/develop/admin_soeur/src/components/organisms/ChartSection.js\";\n// src/components/organisms/ChartSection.js\nimport React from \"react\";\nimport ApexChart from \"react-apexcharts\";\nimport users from \"../../data/test_users\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst getStatusColor = status => {\n  switch (status) {\n    case \"未登録\":\n      return \"#6B7280\";\n    // gray-500\n    case \"確認中\":\n      return \"#3B82F6\";\n    // blue-500\n    case \"承認\":\n      return \"#34D399\";\n    // green-500\n    case \"拒否\":\n      return \"#EF4444\";\n    // red-500\n    case \"学生認証\":\n      return \"#8B5CF6\";\n    // purple-500\n    default:\n      return \"#000000\";\n    // black as default\n  }\n};\n\nconst ChartSection = () => {\n  // ステータスごとのユーザー数を計算\n  const userCounts = users.reduce((counts, user) => {\n    counts[user.status] = (counts[user.status] || 0) + 1;\n    return counts;\n  }, {});\n  const chartData = Object.entries(userCounts).map(([status, count]) => ({\n    label: status,\n    value: count,\n    color: getStatusColor(status)\n  }));\n  const options = {\n    labels: chartData.map(item => item.label),\n    colors: chartData.map(item => item.color),\n    legend: {\n      show: false\n    }\n  };\n  const series = chartData.map(item => item.value);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chart mb-10\",\n    children: /*#__PURE__*/_jsxDEV(ApexChart, {\n      type: \"donut\",\n      options: options,\n      series: series,\n      width: \"350\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n};\n_c = ChartSection;\nexport default ChartSection;\nvar _c;\n$RefreshReg$(_c, \"ChartSection\");","map":{"version":3,"names":["React","ApexChart","users","jsxDEV","_jsxDEV","getStatusColor","status","ChartSection","userCounts","reduce","counts","user","chartData","Object","entries","map","count","label","value","color","options","labels","item","colors","legend","show","series","className","children","type","width","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/takuma/Desktop/develop/admin_soeur/src/components/organisms/ChartSection.js"],"sourcesContent":["// src/components/organisms/ChartSection.js\nimport React from \"react\";\nimport ApexChart from \"react-apexcharts\";\nimport users from \"../../data/test_users\";\n\nconst getStatusColor = (status) => {\n  switch (status) {\n    case \"未登録\":\n      return \"#6B7280\"; // gray-500\n    case \"確認中\":\n      return \"#3B82F6\"; // blue-500\n    case \"承認\":\n      return \"#34D399\"; // green-500\n    case \"拒否\":\n      return \"#EF4444\"; // red-500\n    case \"学生認証\":\n      return \"#8B5CF6\"; // purple-500\n    default:\n      return \"#000000\"; // black as default\n  }\n};\n\nconst ChartSection = () => {\n  // ステータスごとのユーザー数を計算\n  const userCounts = users.reduce((counts, user) => {\n    counts[user.status] = (counts[user.status] || 0) + 1;\n    return counts;\n  }, {});\n\n  const chartData = Object.entries(userCounts).map(([status, count]) => ({\n    label: status,\n    value: count,\n    color: getStatusColor(status),\n  }));\n\n  const options = {\n    labels: chartData.map((item) => item.label),\n    colors: chartData.map((item) => item.color),\n    legend: {\n      show: false,\n    },\n  };\n\n  const series = chartData.map((item) => item.value);\n\n  return (\n    <div className=\"chart mb-10\">\n      <ApexChart type=\"donut\" options={options} series={series} width=\"350\" />\n    </div>\n  );\n};\n\nexport default ChartSection;\n"],"mappings":";AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,SAAS,MAAM,kBAAkB;AACxC,OAAOC,KAAK,MAAM,uBAAuB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1C,MAAMC,cAAc,GAAIC,MAAM,IAAK;EACjC,QAAQA,MAAM;IACZ,KAAK,KAAK;MACR,OAAO,SAAS;IAAE;IACpB,KAAK,KAAK;MACR,OAAO,SAAS;IAAE;IACpB,KAAK,IAAI;MACP,OAAO,SAAS;IAAE;IACpB,KAAK,IAAI;MACP,OAAO,SAAS;IAAE;IACpB,KAAK,MAAM;MACT,OAAO,SAAS;IAAE;IACpB;MACE,OAAO,SAAS;IAAE;EACtB;AACF,CAAC;;AAED,MAAMC,YAAY,GAAGA,CAAA,KAAM;EACzB;EACA,MAAMC,UAAU,GAAGN,KAAK,CAACO,MAAM,CAAC,CAACC,MAAM,EAAEC,IAAI,KAAK;IAChDD,MAAM,CAACC,IAAI,CAACL,MAAM,CAAC,GAAG,CAACI,MAAM,CAACC,IAAI,CAACL,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC;IACpD,OAAOI,MAAM;EACf,CAAC,EAAE,CAAC,CAAC,CAAC;EAEN,MAAME,SAAS,GAAGC,MAAM,CAACC,OAAO,CAACN,UAAU,CAAC,CAACO,GAAG,CAAC,CAAC,CAACT,MAAM,EAAEU,KAAK,CAAC,MAAM;IACrEC,KAAK,EAAEX,MAAM;IACbY,KAAK,EAAEF,KAAK;IACZG,KAAK,EAAEd,cAAc,CAACC,MAAM;EAC9B,CAAC,CAAC,CAAC;EAEH,MAAMc,OAAO,GAAG;IACdC,MAAM,EAAET,SAAS,CAACG,GAAG,CAAEO,IAAI,IAAKA,IAAI,CAACL,KAAK,CAAC;IAC3CM,MAAM,EAAEX,SAAS,CAACG,GAAG,CAAEO,IAAI,IAAKA,IAAI,CAACH,KAAK,CAAC;IAC3CK,MAAM,EAAE;MACNC,IAAI,EAAE;IACR;EACF,CAAC;EAED,MAAMC,MAAM,GAAGd,SAAS,CAACG,GAAG,CAAEO,IAAI,IAAKA,IAAI,CAACJ,KAAK,CAAC;EAElD,oBACEd,OAAA;IAAKuB,SAAS,EAAC,aAAa;IAAAC,QAAA,eAC1BxB,OAAA,CAACH,SAAS;MAAC4B,IAAI,EAAC,OAAO;MAACT,OAAO,EAAEA,OAAQ;MAACM,MAAM,EAAEA,MAAO;MAACI,KAAK,EAAC;IAAK;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACrE,CAAC;AAEV,CAAC;AAACC,EAAA,GA5BI5B,YAAY;AA8BlB,eAAeA,YAAY;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}