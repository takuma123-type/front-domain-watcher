{"ast":null,"code":"import { UsersRepository } from \"../infrastructure/repositories/UsersRepository\";\nimport { UserItem } from \"../models/presentation/UserItem\";\nimport { Storage } from \"../infrastructure/Storage\"; // 追加\nimport { InvlalidSessionTokenError, UnauthorizedError } from \"../infrastructure/repositories\"; // 追加\n\n// 入力用のクラス\nexport class FetchUsersInput {\n  constructor(sessionToken) {\n    this.sessionToken = void 0;\n    this.sessionToken = sessionToken;\n  }\n}\n\n// 出力用のクラス\nexport class FetchUsersOutput {\n  constructor(users) {\n    this.users = void 0;\n    this.users = users;\n  }\n}\nexport class FetchUsersUsecase {\n  async fetch(input) {\n    const {\n      sessionToken\n    } = input;\n    if (!sessionToken) {\n      return Promise.reject(new InvlalidSessionTokenError());\n    }\n    try {\n      const data = await new UsersRepository().fetch(sessionToken); // UsersRepositoryの新しいインスタンスを作成\n      const users = data.map(user => new UserItem(user));\n      return new FetchUsersOutput(users);\n    } catch (e) {\n      if (e instanceof UnauthorizedError) {\n        Storage.clear(); // 認証エラーの場合、ストレージをクリア\n      }\n\n      throw e;\n    }\n  }\n}","map":{"version":3,"names":["UsersRepository","UserItem","Storage","InvlalidSessionTokenError","UnauthorizedError","FetchUsersInput","constructor","sessionToken","FetchUsersOutput","users","FetchUsersUsecase","fetch","input","Promise","reject","data","map","user","e","clear"],"sources":["/usr/src/app/admin_front/src/usecases/FetchUsersUsecase.tsx"],"sourcesContent":["import { UsersRepository } from \"../infrastructure/repositories/UsersRepository\";\nimport { UserItem } from \"../models/presentation/UserItem\";\nimport { Storage } from \"../infrastructure/Storage\"; // 追加\nimport {\n  InvlalidSessionTokenError,\n  UnauthorizedError,\n} from \"../infrastructure/repositories\"; // 追加\n\n// 入力用のクラス\nexport class FetchUsersInput {\n  readonly sessionToken: string;\n\n  constructor(sessionToken: string) {\n    this.sessionToken = sessionToken;\n  }\n}\n\n// 出力用のクラス\nexport class FetchUsersOutput {\n  readonly users: UserItem[];\n\n  constructor(users: UserItem[]) {\n    this.users = users;\n  }\n}\n\nexport class FetchUsersUsecase {\n  async fetch(input: FetchUsersInput): Promise<FetchUsersOutput> {\n    const { sessionToken } = input;\n\n    if (!sessionToken) {\n      return Promise.reject(new InvlalidSessionTokenError());\n    }\n\n    try {\n      const data = await new UsersRepository().fetch(sessionToken); // UsersRepositoryの新しいインスタンスを作成\n      const users = data.map((user: any) => new UserItem(user));\n      return new FetchUsersOutput(users);\n    } catch (e) {\n      if (e instanceof UnauthorizedError) {\n        Storage.clear(); // 認証エラーの場合、ストレージをクリア\n      }\n      throw e;\n    }\n  }\n}\n"],"mappings":"AAAA,SAASA,eAAe,QAAQ,gDAAgD;AAChF,SAASC,QAAQ,QAAQ,iCAAiC;AAC1D,SAASC,OAAO,QAAQ,2BAA2B,CAAC,CAAC;AACrD,SACEC,yBAAyB,EACzBC,iBAAiB,QACZ,gCAAgC,CAAC,CAAC;;AAEzC;AACA,OAAO,MAAMC,eAAe,CAAC;EAG3BC,WAAWA,CAACC,YAAoB,EAAE;IAAA,KAFzBA,YAAY;IAGnB,IAAI,CAACA,YAAY,GAAGA,YAAY;EAClC;AACF;;AAEA;AACA,OAAO,MAAMC,gBAAgB,CAAC;EAG5BF,WAAWA,CAACG,KAAiB,EAAE;IAAA,KAFtBA,KAAK;IAGZ,IAAI,CAACA,KAAK,GAAGA,KAAK;EACpB;AACF;AAEA,OAAO,MAAMC,iBAAiB,CAAC;EAC7B,MAAMC,KAAKA,CAACC,KAAsB,EAA6B;IAC7D,MAAM;MAAEL;IAAa,CAAC,GAAGK,KAAK;IAE9B,IAAI,CAACL,YAAY,EAAE;MACjB,OAAOM,OAAO,CAACC,MAAM,CAAC,IAAIX,yBAAyB,CAAC,CAAC,CAAC;IACxD;IAEA,IAAI;MACF,MAAMY,IAAI,GAAG,MAAM,IAAIf,eAAe,CAAC,CAAC,CAACW,KAAK,CAACJ,YAAY,CAAC,CAAC,CAAC;MAC9D,MAAME,KAAK,GAAGM,IAAI,CAACC,GAAG,CAAEC,IAAS,IAAK,IAAIhB,QAAQ,CAACgB,IAAI,CAAC,CAAC;MACzD,OAAO,IAAIT,gBAAgB,CAACC,KAAK,CAAC;IACpC,CAAC,CAAC,OAAOS,CAAC,EAAE;MACV,IAAIA,CAAC,YAAYd,iBAAiB,EAAE;QAClCF,OAAO,CAACiB,KAAK,CAAC,CAAC,CAAC,CAAC;MACnB;;MACA,MAAMD,CAAC;IACT;EACF;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}